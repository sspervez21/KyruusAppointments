// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Appointment A doctor's appointment
// swagger:model Appointment
type Appointment struct {

	// day
	// Required: true
	Day *string `json:"day"`

	// doctor Id
	// Required: true
	DoctorID *int64 `json:"doctorId"`

	// location Id
	// Required: true
	LocationID *string `json:"locationId"`

	// time
	// Required: true
	Time *int64 `json:"time"`
}

// Validate validates this appointment
func (m *Appointment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDoctorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Appointment) validateDay(formats strfmt.Registry) error {

	if err := validate.Required("day", "body", m.Day); err != nil {
		return err
	}

	return nil
}

func (m *Appointment) validateDoctorID(formats strfmt.Registry) error {

	if err := validate.Required("doctorId", "body", m.DoctorID); err != nil {
		return err
	}

	return nil
}

func (m *Appointment) validateLocationID(formats strfmt.Registry) error {

	if err := validate.Required("locationId", "body", m.LocationID); err != nil {
		return err
	}

	return nil
}

func (m *Appointment) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Appointment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Appointment) UnmarshalBinary(b []byte) error {
	var res Appointment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
