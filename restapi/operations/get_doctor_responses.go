// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "KyruusAppointments/models"
)

// GetDoctorOKCode is the HTTP code returned for type GetDoctorOK
const GetDoctorOKCode int = 200

/*GetDoctorOK OK

swagger:response getDoctorOK
*/
type GetDoctorOK struct {

	/*
	  In: Body
	*/
	Payload *models.Doctor `json:"body,omitempty"`
}

// NewGetDoctorOK creates GetDoctorOK with default headers values
func NewGetDoctorOK() *GetDoctorOK {

	return &GetDoctorOK{}
}

// WithPayload adds the payload to the get doctor o k response
func (o *GetDoctorOK) WithPayload(payload *models.Doctor) *GetDoctorOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get doctor o k response
func (o *GetDoctorOK) SetPayload(payload *models.Doctor) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDoctorOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDoctorNotFoundCode is the HTTP code returned for type GetDoctorNotFound
const GetDoctorNotFoundCode int = 404

/*GetDoctorNotFound Doctor not found

swagger:response getDoctorNotFound
*/
type GetDoctorNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.BadRequest `json:"body,omitempty"`
}

// NewGetDoctorNotFound creates GetDoctorNotFound with default headers values
func NewGetDoctorNotFound() *GetDoctorNotFound {

	return &GetDoctorNotFound{}
}

// WithPayload adds the payload to the get doctor not found response
func (o *GetDoctorNotFound) WithPayload(payload *models.BadRequest) *GetDoctorNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get doctor not found response
func (o *GetDoctorNotFound) SetPayload(payload *models.BadRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDoctorNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
