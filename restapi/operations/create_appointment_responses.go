// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "KyruusAppointments/models"
)

// CreateAppointmentOKCode is the HTTP code returned for type CreateAppointmentOK
const CreateAppointmentOKCode int = 200

/*CreateAppointmentOK OK

swagger:response createAppointmentOK
*/
type CreateAppointmentOK struct {
}

// NewCreateAppointmentOK creates CreateAppointmentOK with default headers values
func NewCreateAppointmentOK() *CreateAppointmentOK {

	return &CreateAppointmentOK{}
}

// WriteResponse to the client
func (o *CreateAppointmentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// CreateAppointmentConflictCode is the HTTP code returned for type CreateAppointmentConflict
const CreateAppointmentConflictCode int = 409

/*CreateAppointmentConflict Appointment could not be created

swagger:response createAppointmentConflict
*/
type CreateAppointmentConflict struct {

	/*
	  In: Body
	*/
	Payload *models.BadRequest `json:"body,omitempty"`
}

// NewCreateAppointmentConflict creates CreateAppointmentConflict with default headers values
func NewCreateAppointmentConflict() *CreateAppointmentConflict {

	return &CreateAppointmentConflict{}
}

// WithPayload adds the payload to the create appointment conflict response
func (o *CreateAppointmentConflict) WithPayload(payload *models.BadRequest) *CreateAppointmentConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create appointment conflict response
func (o *CreateAppointmentConflict) SetPayload(payload *models.BadRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAppointmentConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
