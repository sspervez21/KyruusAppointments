// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "KyruusAppointments/models"
)

// CreateDoctorOKCode is the HTTP code returned for type CreateDoctorOK
const CreateDoctorOKCode int = 200

/*CreateDoctorOK OK

swagger:response createDoctorOK
*/
type CreateDoctorOK struct {
}

// NewCreateDoctorOK creates CreateDoctorOK with default headers values
func NewCreateDoctorOK() *CreateDoctorOK {

	return &CreateDoctorOK{}
}

// WriteResponse to the client
func (o *CreateDoctorOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// CreateDoctorConflictCode is the HTTP code returned for type CreateDoctorConflict
const CreateDoctorConflictCode int = 409

/*CreateDoctorConflict Doctor with id already exists

swagger:response createDoctorConflict
*/
type CreateDoctorConflict struct {

	/*
	  In: Body
	*/
	Payload *models.BadRequest `json:"body,omitempty"`
}

// NewCreateDoctorConflict creates CreateDoctorConflict with default headers values
func NewCreateDoctorConflict() *CreateDoctorConflict {

	return &CreateDoctorConflict{}
}

// WithPayload adds the payload to the create doctor conflict response
func (o *CreateDoctorConflict) WithPayload(payload *models.BadRequest) *CreateDoctorConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create doctor conflict response
func (o *CreateDoctorConflict) SetPayload(payload *models.BadRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateDoctorConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
