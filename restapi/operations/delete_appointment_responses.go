// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "KyruusAppointments/models"
)

// DeleteAppointmentOKCode is the HTTP code returned for type DeleteAppointmentOK
const DeleteAppointmentOKCode int = 200

/*DeleteAppointmentOK OK

swagger:response deleteAppointmentOK
*/
type DeleteAppointmentOK struct {
}

// NewDeleteAppointmentOK creates DeleteAppointmentOK with default headers values
func NewDeleteAppointmentOK() *DeleteAppointmentOK {

	return &DeleteAppointmentOK{}
}

// WriteResponse to the client
func (o *DeleteAppointmentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteAppointmentNotFoundCode is the HTTP code returned for type DeleteAppointmentNotFound
const DeleteAppointmentNotFoundCode int = 404

/*DeleteAppointmentNotFound Appointment does not exists

swagger:response deleteAppointmentNotFound
*/
type DeleteAppointmentNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.BadRequest `json:"body,omitempty"`
}

// NewDeleteAppointmentNotFound creates DeleteAppointmentNotFound with default headers values
func NewDeleteAppointmentNotFound() *DeleteAppointmentNotFound {

	return &DeleteAppointmentNotFound{}
}

// WithPayload adds the payload to the delete appointment not found response
func (o *DeleteAppointmentNotFound) WithPayload(payload *models.BadRequest) *DeleteAppointmentNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete appointment not found response
func (o *DeleteAppointmentNotFound) SetPayload(payload *models.BadRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteAppointmentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
