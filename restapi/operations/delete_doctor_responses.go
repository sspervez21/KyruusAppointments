// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "KyruusAppointments/models"
)

// DeleteDoctorOKCode is the HTTP code returned for type DeleteDoctorOK
const DeleteDoctorOKCode int = 200

/*DeleteDoctorOK OK

swagger:response deleteDoctorOK
*/
type DeleteDoctorOK struct {
}

// NewDeleteDoctorOK creates DeleteDoctorOK with default headers values
func NewDeleteDoctorOK() *DeleteDoctorOK {

	return &DeleteDoctorOK{}
}

// WriteResponse to the client
func (o *DeleteDoctorOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// DeleteDoctorNotFoundCode is the HTTP code returned for type DeleteDoctorNotFound
const DeleteDoctorNotFoundCode int = 404

/*DeleteDoctorNotFound Doctor does not exists

swagger:response deleteDoctorNotFound
*/
type DeleteDoctorNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.BadRequest `json:"body,omitempty"`
}

// NewDeleteDoctorNotFound creates DeleteDoctorNotFound with default headers values
func NewDeleteDoctorNotFound() *DeleteDoctorNotFound {

	return &DeleteDoctorNotFound{}
}

// WithPayload adds the payload to the delete doctor not found response
func (o *DeleteDoctorNotFound) WithPayload(payload *models.BadRequest) *DeleteDoctorNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete doctor not found response
func (o *DeleteDoctorNotFound) SetPayload(payload *models.BadRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteDoctorNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
