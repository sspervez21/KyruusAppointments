// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "KyruusAppointments/models"
)

// UpdateDoctorOKCode is the HTTP code returned for type UpdateDoctorOK
const UpdateDoctorOKCode int = 200

/*UpdateDoctorOK OK

swagger:response updateDoctorOK
*/
type UpdateDoctorOK struct {
}

// NewUpdateDoctorOK creates UpdateDoctorOK with default headers values
func NewUpdateDoctorOK() *UpdateDoctorOK {

	return &UpdateDoctorOK{}
}

// WriteResponse to the client
func (o *UpdateDoctorOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// UpdateDoctorNotFoundCode is the HTTP code returned for type UpdateDoctorNotFound
const UpdateDoctorNotFoundCode int = 404

/*UpdateDoctorNotFound Doctor does not exists

swagger:response updateDoctorNotFound
*/
type UpdateDoctorNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.BadRequest `json:"body,omitempty"`
}

// NewUpdateDoctorNotFound creates UpdateDoctorNotFound with default headers values
func NewUpdateDoctorNotFound() *UpdateDoctorNotFound {

	return &UpdateDoctorNotFound{}
}

// WithPayload adds the payload to the update doctor not found response
func (o *UpdateDoctorNotFound) WithPayload(payload *models.BadRequest) *UpdateDoctorNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update doctor not found response
func (o *UpdateDoctorNotFound) SetPayload(payload *models.BadRequest) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateDoctorNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
